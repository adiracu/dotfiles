#!/bin/bash

# --------------------------
# Global Variables

declare ASSUME_YES=
declare SHOULD_INSTALL_RESPONSE=

# Check for given arguments

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP

Usage: $(basename "$0") [--assume-yes]

--assume-yes : it won't ask for confirmation before each install

What it does:

  1. It checks if there is an internet connection. Otherwise it exits (1)
  2. For all the detected labels, try to download 'conf/label/packages' by using
        the package_manager 'conf/label/package_manager'
  3. If the package manager isn't installed, it will try to install it (if it is brew)
  4. If the package manager still isn't installed, it exits (1)
  5. Lines in 'conf/label/packages' have the form 'cmd_to_test:package_to_install'
     - If 'cmd_to_test' isn't found, it will pass 'package_to_install' to the package_manager
  6. While installing packages, it prompts the user for each install unless otherwise specified.
     - The user has 5 seconds to responds, otherwise no is assumed.
HELP
exit; fi

if [[ "$1" == "--asume-yes" ]]; then
	ASSUME_YES=1
fi

# --------------------------
# Function declarations
function e_question() { echo -e " \033[1;33m?\033[0m  $@"; }
function e_header()   { echo -e "\n\033[1m$@\033[0m"; }
function e_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_arrow()    { echo -e " \033[1;33m➜\033[0m  $@"; }

COLOR_GREEN="\033[0;33m"
COLOR_BOLD_GREEN="\033[1;33m"
COLOR_OFF="\033[0m"

# Puts y, a, n or s in the variable SHOULD_INSTALL_RESPONSE
# $1 needs to be the command name
# $2 is the package name for the given command
function askForConfirmation() {

			if [[ "$ASSUME_YES" ]]; then
				SHOULD_INSTALL_RESPONSE='y'
				return
			fi

			SHOULD_INSTALL_RESPONSE=
			e_question "${COLOR_GREEN}$1${COLOR_OFF} command seems to be missing. Do you want to install it (via package ${COLOR_GREEN}$2${COLOR_OFF})? ."

			while [[ ! $SHOULD_INSTALL_RESPONSE =~ [y|a|n|s] ]]; do
	   		 echo -e "    ${COLOR_BOLD_GREEN}(y)${COLOR_OFF}es, yes to ${COLOR_BOLD_GREEN}(a)${COLOR_OFF}ll, ${COLOR_BOLD_GREEN}(n)${COLOR_OFF}o, ${COLOR_BOLD_GREEN}(s)${COLOR_OFF}kip all for this label  (5 second timeout, defaults to ${COLOR_BOLD_GREEN}no${COLOR_OFF})? ${COLOR_OFF}"
				# -r     : don't allow backslashes
				# -s     : don't echo key presses back to the terminal
				# -n 1   : only allow 1 character
				# -t 10  : timeout of 10 seconds
				SHOULD_INSTALL_RESPONSE="n"
				read -r -s -n 1 -t 5 SHOULD_INSTALL_RESPONSE
			done
}

function installPackageManager-brew()
{
	ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
}

function installPackageWith-brew()
{
	e_success "Installing package ${COLOR_GREEN}$1${COLOR_OFF}"
	echo brew install "$1"
}

function installPackageWith-pacman()
{
	e_success "Installing package ${COLOR_GREEN}$1${COLOR_OFF}"
	echo pacman -Sy "$1"
}

function isCommandPresent()
{
	command -v $1 &>/dev/null
}

# -------------------------
# MAIN SCRIPT LOGIC


# CHECK INTERNET CONNECTION FIRST

# Try to ping 1 packet,
# Timeout 1 second
if ! ping -W 1 -c 1 www.google.com &>/dev/null ; then
	if ! ping -W 1 -c1 www.yahoo.com &>/dev/null ; then
		e_error "There is no internet connection (or both Google and Yahoo are down). Abandoning installation of packages."
		# exit 1
	fi
fi

IFS=$'\n'
for label in `cat $HOME/.dotfiles/conf/labels_detected` ; do
	e_header "Installing packages for label $label"

	if ! test -f $HOME/.dotfiles/conf/$label/package_manager; then
		e_error "No package manager file found at conf/$label/package_manager. Skipping label."
		continue
	fi

	PACKAGE_MANAGER=`cat $HOME/.dotfiles/conf/$label/package_manager`

	if ! test -f $HOME/.dotfiles/conf/$label/packages; then
		e_error "No list of packages file found at conf/$label/packages. Skipping label."
		continue
	fi

	PACKAGES=`cat $HOME/.dotfiles/conf/$label/packages`


	# Install the package manager if not installed
	if ! isCommandPresent $PACKAGE_MANAGER ; then
		e_arrow "Package Manager $PACKAGE_MANAGER isn't installed. Trying to install it."

		if  [[ $(declare -f "installPackageManager-$PACKAGE_MANAGER") ]]; then
			installPackageManager-$PACKAGE_MANAGER
		else
			e_error "No installer defined for the package manager $PACKAGE_MANAGER"
		fi
	fi

	# Recheck that the package manager is installed
	if ! isCommandPresent $PACKAGE_MANAGER ; then
		e_error "Package Manager $PACKAGE_MANAGER still isn't installed, Skipping label"
		continue
	fi

	SKIP_ALL_FOR_LABEL=
	# Install all missing packages
	while IFS=$':' read -r cmdToTest packageToInstall ; do

		if ! isCommandPresent "$cmdToTest"; then

			SHOULD_INSTALL_RESPONSE=d
			askForConfirmation "$cmdToTest" "$packageToInstall" </dev/tty

			echo $SHOULD_INSTALL_RESPONSE
			case $SHOULD_INSTALL_RESPONSE in
				y)
					installPackageWith-$PACKAGE_MANAGER "$packageToInstall" ;;
				a)
					installPackageWith-$PACKAGE_MANAGER "$packageToInstall"
					ASSUME_YES=1 ;;
				n)
					e_error "Skipping $packageToInstall" ;;
				s)
					e_error "Skipping all package installations for this label"
					SKIP_ALL_FOR_LABEL=1
					break
			esac
		fi
	done <<< "$PACKAGES"

	if [[ $SKIP_ALL_FOR_LABEL ]]; then
		continue
	fi
done

echo ""
e_success " `basename $0` done"
